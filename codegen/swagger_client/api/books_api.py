# coding: utf-8

"""
    SAFRS Demo App

    <a href=http://jsonapi.org>Json-API</a> compliant API built with https://github.com/thomaxxl/safrs <br/>- <a href=\"https://github.com/thomaxxl/safrs/blob/master/examples/demo_relationship.py\">Source code of this page</a> <br/> - Auto-generated swagger spec: <a href=swagger.json>swagger.json</a> <br/> - Petstore <a href=http://petstore.swagger.io/?url=http://thomaxxl.pythonanywhere.com/api/swagger.json>Swagger2 UI</a>                                         # noqa: E501

    OpenAPI spec version: 0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class BooksApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def 2(self, book_id, post_body, **kwargs):  # noqa: E501
        """Update a Book object              # noqa: E501

        Returns a Book  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.2(book_id, post_body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str book_id: (required)
        :param BookPOSTSample1 post_body: Book attributes (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.2_with_http_info(book_id, post_body, **kwargs)  # noqa: E501
        else:
            (data) = self.2_with_http_info(book_id, post_body, **kwargs)  # noqa: E501
            return data

    def 2_with_http_info(self, book_id, post_body, **kwargs):  # noqa: E501
        """Update a Book object              # noqa: E501

        Returns a Book  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.2_with_http_info(book_id, post_body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str book_id: (required)
        :param BookPOSTSample1 post_body: Book attributes (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['book_id', 'post_body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method 2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'book_id' is set
        if ('book_id' not in params or
                params['book_id'] is None):
            raise ValueError("Missing the required parameter `book_id` when calling `2`")  # noqa: E501
        # verify the required parameter 'post_body' is set
        if ('post_body' not in params or
                params['post_body'] is None):
            raise ValueError("Missing the required parameter `post_body` when calling `2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'book_id' in params:
            path_params['BookId'] = params['book_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'post_body' in params:
            body_params = params['post_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Books/{BookId}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def 3(self, book_id, **kwargs):  # noqa: E501
        """Delete a Book object              # noqa: E501

        Delete a Book object  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.3(book_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str book_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.3_with_http_info(book_id, **kwargs)  # noqa: E501
        else:
            (data) = self.3_with_http_info(book_id, **kwargs)  # noqa: E501
            return data

    def 3_with_http_info(self, book_id, **kwargs):  # noqa: E501
        """Delete a Book object              # noqa: E501

        Delete a Book object  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.3_with_http_info(book_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str book_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['book_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method 3" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'book_id' is set
        if ('book_id' not in params or
                params['book_id'] is None):
            raise ValueError("Missing the required parameter `book_id` when calling `3`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'book_id' in params:
            path_params['BookId'] = params['book_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Books/{BookId}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def 4(self, book_id, user_id, **kwargs):  # noqa: E501
        """Delete from Book user  # noqa: E501

        Delete a User object from the user relation on Book  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.4(book_id, user_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str book_id: Book item (required)
        :param str user_id: user item (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.4_with_http_info(book_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.4_with_http_info(book_id, user_id, **kwargs)  # noqa: E501
            return data

    def 4_with_http_info(self, book_id, user_id, **kwargs):  # noqa: E501
        """Delete from Book user  # noqa: E501

        Delete a User object from the user relation on Book  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.4_with_http_info(book_id, user_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str book_id: Book item (required)
        :param str user_id: user item (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['book_id', 'user_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method 4" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'book_id' is set
        if ('book_id' not in params or
                params['book_id'] is None):
            raise ValueError("Missing the required parameter `book_id` when calling `4`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `4`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'book_id' in params:
            path_params['BookId'] = params['book_id']  # noqa: E501
        if 'user_id' in params:
            path_params['UserId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Books/{BookId}/user/{UserId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def 5(self, **kwargs):  # noqa: E501
        """Retrieve a Book object              # noqa: E501

        Returns a Book  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.5(async=True)
        >>> result = thread.get()

        :param async bool
        :param int page_offset: Page offset
        :param int page_limit: max number of items
        :param str include: related objects to include
        :param str fields_books: Fields to be selected (csv)
        :param str sort: Sort order
        :param str filter_name: name attribute filter (csv)
        :param str filter_user_id: user_id attribute filter (csv)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.5_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.5_with_http_info(**kwargs)  # noqa: E501
            return data

    def 5_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve a Book object              # noqa: E501

        Returns a Book  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.5_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int page_offset: Page offset
        :param int page_limit: max number of items
        :param str include: related objects to include
        :param str fields_books: Fields to be selected (csv)
        :param str sort: Sort order
        :param str filter_name: name attribute filter (csv)
        :param str filter_user_id: user_id attribute filter (csv)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page_offset', 'page_limit', 'include', 'fields_books', 'sort', 'filter_name', 'filter_user_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method 5" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page_offset' in params:
            query_params.append(('page[offset]', params['page_offset']))  # noqa: E501
        if 'page_limit' in params:
            query_params.append(('page[limit]', params['page_limit']))  # noqa: E501
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
        if 'fields_books' in params:
            query_params.append(('fields[Books]', params['fields_books']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'filter_name' in params:
            query_params.append(('filter[name]', params['filter_name']))  # noqa: E501
        if 'filter_user_id' in params:
            query_params.append(('filter[user_id]', params['filter_user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Books/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def 5_0(self, post_body, **kwargs):  # noqa: E501
        """Create a Book object              # noqa: E501

        Returns a Book  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.5_0(post_body, async=True)
        >>> result = thread.get()

        :param async bool
        :param BookPOSTSample post_body: Book attributes (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.5_0_with_http_info(post_body, **kwargs)  # noqa: E501
        else:
            (data) = self.5_0_with_http_info(post_body, **kwargs)  # noqa: E501
            return data

    def 5_0_with_http_info(self, post_body, **kwargs):  # noqa: E501
        """Create a Book object              # noqa: E501

        Returns a Book  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.5_0_with_http_info(post_body, async=True)
        >>> result = thread.get()

        :param async bool
        :param BookPOSTSample post_body: Book attributes (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['post_body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method 5_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'post_body' is set
        if ('post_body' not in params or
                params['post_body'] is None):
            raise ValueError("Missing the required parameter `post_body` when calling `5_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'post_body' in params:
            body_params = params['post_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Books/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def 6(self, book_id, **kwargs):  # noqa: E501
        """Retrieve a Book object                          # noqa: E501

        Returns a Book  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.6(book_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str book_id: (required)
        :param int page_offset: Page offset
        :param int page_limit: max number of items
        :param str include: related objects to include
        :param str fields_books: Fields to be selected (csv)
        :param str sort: Sort order
        :param str filter_name: name attribute filter (csv)
        :param str filter_user_id: user_id attribute filter (csv)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.6_with_http_info(book_id, **kwargs)  # noqa: E501
        else:
            (data) = self.6_with_http_info(book_id, **kwargs)  # noqa: E501
            return data

    def 6_with_http_info(self, book_id, **kwargs):  # noqa: E501
        """Retrieve a Book object                          # noqa: E501

        Returns a Book  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.6_with_http_info(book_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str book_id: (required)
        :param int page_offset: Page offset
        :param int page_limit: max number of items
        :param str include: related objects to include
        :param str fields_books: Fields to be selected (csv)
        :param str sort: Sort order
        :param str filter_name: name attribute filter (csv)
        :param str filter_user_id: user_id attribute filter (csv)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['book_id', 'page_offset', 'page_limit', 'include', 'fields_books', 'sort', 'filter_name', 'filter_user_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method 6" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'book_id' is set
        if ('book_id' not in params or
                params['book_id'] is None):
            raise ValueError("Missing the required parameter `book_id` when calling `6`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'book_id' in params:
            path_params['BookId'] = params['book_id']  # noqa: E501

        query_params = []
        if 'page_offset' in params:
            query_params.append(('page[offset]', params['page_offset']))  # noqa: E501
        if 'page_limit' in params:
            query_params.append(('page[limit]', params['page_limit']))  # noqa: E501
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
        if 'fields_books' in params:
            query_params.append(('fields[Books]', params['fields_books']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'filter_name' in params:
            query_params.append(('filter[name]', params['filter_name']))  # noqa: E501
        if 'filter_user_id' in params:
            query_params.append(('filter[user_id]', params['filter_user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Books/{BookId}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def 6_0(self, book_id, post_body, **kwargs):  # noqa: E501
        """Create a Book object                          # noqa: E501

        Returns a Book  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.6_0(book_id, post_body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str book_id: (required)
        :param BookPOSTSample post_body: Book attributes (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.6_0_with_http_info(book_id, post_body, **kwargs)  # noqa: E501
        else:
            (data) = self.6_0_with_http_info(book_id, post_body, **kwargs)  # noqa: E501
            return data

    def 6_0_with_http_info(self, book_id, post_body, **kwargs):  # noqa: E501
        """Create a Book object                          # noqa: E501

        Returns a Book  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.6_0_with_http_info(book_id, post_body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str book_id: (required)
        :param BookPOSTSample post_body: Book attributes (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['book_id', 'post_body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method 6_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'book_id' is set
        if ('book_id' not in params or
                params['book_id'] is None):
            raise ValueError("Missing the required parameter `book_id` when calling `6_0`")  # noqa: E501
        # verify the required parameter 'post_body' is set
        if ('post_body' not in params or
                params['post_body'] is None):
            raise ValueError("Missing the required parameter `post_body` when calling `6_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'book_id' in params:
            path_params['BookId'] = params['book_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'post_body' in params:
            body_params = params['post_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Books/{BookId}/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def 7(self, book_id, **kwargs):  # noqa: E501
        """Retrieve a user object  # noqa: E501

        Returns Book user ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.7(book_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str book_id: Book item (required)
        :param int page_offset: Page offset
        :param int page_limit: max number of items
        :param str include: related objects to include
        :param str fields_books: Fields to be selected (csv)
        :param str sort: Sort order
        :param str filter_name: name attribute filter (csv)
        :param str filter_user_id: user_id attribute filter (csv)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.7_with_http_info(book_id, **kwargs)  # noqa: E501
        else:
            (data) = self.7_with_http_info(book_id, **kwargs)  # noqa: E501
            return data

    def 7_with_http_info(self, book_id, **kwargs):  # noqa: E501
        """Retrieve a user object  # noqa: E501

        Returns Book user ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.7_with_http_info(book_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str book_id: Book item (required)
        :param int page_offset: Page offset
        :param int page_limit: max number of items
        :param str include: related objects to include
        :param str fields_books: Fields to be selected (csv)
        :param str sort: Sort order
        :param str filter_name: name attribute filter (csv)
        :param str filter_user_id: user_id attribute filter (csv)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['book_id', 'page_offset', 'page_limit', 'include', 'fields_books', 'sort', 'filter_name', 'filter_user_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method 7" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'book_id' is set
        if ('book_id' not in params or
                params['book_id'] is None):
            raise ValueError("Missing the required parameter `book_id` when calling `7`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'book_id' in params:
            path_params['BookId'] = params['book_id']  # noqa: E501

        query_params = []
        if 'page_offset' in params:
            query_params.append(('page[offset]', params['page_offset']))  # noqa: E501
        if 'page_limit' in params:
            query_params.append(('page[limit]', params['page_limit']))  # noqa: E501
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
        if 'fields_books' in params:
            query_params.append(('fields[Books]', params['fields_books']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'filter_name' in params:
            query_params.append(('filter[name]', params['filter_name']))  # noqa: E501
        if 'filter_user_id' in params:
            query_params.append(('filter[user_id]', params['filter_user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Books/{BookId}/user', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def 7_0(self, book_id, user_body, **kwargs):  # noqa: E501
        """Update user  # noqa: E501

        Add a User object to the user relation on Book  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.7_0(book_id, user_body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str book_id: Book item (required)
        :param UserRelationship user_body: user POST model (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.7_0_with_http_info(book_id, user_body, **kwargs)  # noqa: E501
        else:
            (data) = self.7_0_with_http_info(book_id, user_body, **kwargs)  # noqa: E501
            return data

    def 7_0_with_http_info(self, book_id, user_body, **kwargs):  # noqa: E501
        """Update user  # noqa: E501

        Add a User object to the user relation on Book  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.7_0_with_http_info(book_id, user_body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str book_id: Book item (required)
        :param UserRelationship user_body: user POST model (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['book_id', 'user_body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method 7_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'book_id' is set
        if ('book_id' not in params or
                params['book_id'] is None):
            raise ValueError("Missing the required parameter `book_id` when calling `7_0`")  # noqa: E501
        # verify the required parameter 'user_body' is set
        if ('user_body' not in params or
                params['user_body'] is None):
            raise ValueError("Missing the required parameter `user_body` when calling `7_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'book_id' in params:
            path_params['BookId'] = params['book_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'user_body' in params:
            body_params = params['user_body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Books/{BookId}/user', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def 8(self, post_book_get_list, **kwargs):  # noqa: E501
        """Invoke Book.get_list              # noqa: E501

        Invoke Book.get_list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.8(post_book_get_list, async=True)
        >>> result = thread.get()

        :param async bool
        :param PostBookGetList post_book_get_list: Retrieve a list of objects with the ids in id_list. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.8_with_http_info(post_book_get_list, **kwargs)  # noqa: E501
        else:
            (data) = self.8_with_http_info(post_book_get_list, **kwargs)  # noqa: E501
            return data

    def 8_with_http_info(self, post_book_get_list, **kwargs):  # noqa: E501
        """Invoke Book.get_list              # noqa: E501

        Invoke Book.get_list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.8_with_http_info(post_book_get_list, async=True)
        >>> result = thread.get()

        :param async bool
        :param PostBookGetList post_book_get_list: Retrieve a list of objects with the ids in id_list. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['post_book_get_list']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method 8" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'post_book_get_list' is set
        if ('post_book_get_list' not in params or
                params['post_book_get_list'] is None):
            raise ValueError("Missing the required parameter `post_book_get_list` when calling `8`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'post_book_get_list' in params:
            body_params = params['post_book_get_list']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Books/get_list', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def 8_0(self, book_id, user_id, **kwargs):  # noqa: E501
        """Retrieve a user object  # noqa: E501

        Returns Book user ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.8_0(book_id, user_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str book_id: Book item (required)
        :param str user_id: user item (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.8_0_with_http_info(book_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.8_0_with_http_info(book_id, user_id, **kwargs)  # noqa: E501
            return data

    def 8_0_with_http_info(self, book_id, user_id, **kwargs):  # noqa: E501
        """Retrieve a user object  # noqa: E501

        Returns Book user ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.8_0_with_http_info(book_id, user_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str book_id: Book item (required)
        :param str user_id: user item (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['book_id', 'user_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method 8_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'book_id' is set
        if ('book_id' not in params or
                params['book_id'] is None):
            raise ValueError("Missing the required parameter `book_id` when calling `8_0`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `8_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'book_id' in params:
            path_params['BookId'] = params['book_id']  # noqa: E501
        if 'user_id' in params:
            path_params['UserId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Books/{BookId}/user/{UserId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
